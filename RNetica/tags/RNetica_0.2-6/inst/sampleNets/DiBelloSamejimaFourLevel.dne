// ~->[DNET-1]->~

// File created by AlmondR at FloridaStateU using Netica 4.16 on Oct 01, 2012 at 14:08:11.

bnet DiBelloSamejimaFourLevel {
AutoCompile = TRUE;
autoupdate = TRUE;
whenchanged = 1349104308;

visual V1 {
	defdispform = BELIEFBARS;
	nodelabeling = TITLE;
	NodeMaxNumEntries = 50;
	nodefont = font {shape= "Arial"; size= 9;};
	linkfont = font {shape= "Arial"; size= 9;};
	windowposn = (60, 60, 1040, 495);
	CommentWindowPosn = (90, 90, 1070, 436);
	resolution = 72;
	drawingbounds = (1080, 720);
	showpagebreaks = FALSE;
	usegrid = TRUE;
	gridspace = (6, 6);
	NodeSet Node {BuiltIn = 1; Color = 0xc0c0c0;};
	NodeSet Nature {BuiltIn = 1; Color = 0xf8eed2;};
	NodeSet Deterministic {BuiltIn = 1; Color = 0xd3caa6;};
	NodeSet Finding {BuiltIn = 1; Color = 0xc8c8c8;};
	NodeSet Constant {BuiltIn = 1; Color = 0xffffff;};
	NodeSet ConstantValue {BuiltIn = 1; Color = 0xffffb4;};
	NodeSet Utility {BuiltIn = 1; Color = 0xffbdbd;};
	NodeSet Decision {BuiltIn = 1; Color = 0xdee8ff;};
	NodeSet Documentation {BuiltIn = 1; Color = 0xf0fafa;};
	NodeSet Title {BuiltIn = 1; Color = 0xffffff;};
	PrinterSetting A {
		margins = (1270, 1270, 1270, 1270);
		landscape = FALSE;
		magnify = 1;
		};
	};

node TITLE1 {
	kind = CONSTANT;
	discrete = FALSE;
	parents = ();
	title = "DiBello Samejima One Parent";
	whenchanged = 1349100816;
	visual V1 {
		center = (358, 64);
		font = font {shape= "Arial"; size= 14;};
		height = 1;
		};
	};

node Skill {
	kind = NATURE;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (1, 0, -1);
	parents = ();
	comment = "Assigned values to the nodes based on the DiBello--Samejima code.\n";
	whenchanged = 1349104308;
	belief = (0.3333333, 0.3333333, 0.3333333);
	visual V1 {
		center = (132, 132);
		height = 2;
		};
	};

node Score4 {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (AlmostAll, Most, Some, AlmostNone);
	inputs = (Skill);
	parents = (Skill);
	probs = 
		// AlmostAll    Most         Some         AlmostNone    // Skill  
		  (0.5,         0.3455347,   0.1221698,   0.03229547,   // High   
		   0.1544653,   0.3455347,   0.3455347,   0.1544653,    // Medium 
		   0.03229547,  0.1221698,   0.3455347,   0.5);         // Low    ;
	numcases = 1;
	equation = "p(Score4 | Skill) =\n\
		\| (Score4==AlmostAll)? 1/(1+exp(-1.7*(A1/sqrt(1)*Skill-B1_3)))  :\n\
		\| (Score4==Most) ? 1/(1+exp(-1.7*(A1/sqrt(1)*Skill-B1_2))) -\n\
		\|                  1/(1+exp(-1.7*(A1/sqrt(1)*Skill-B1_3))) :\n\
		\| (Score4==Some) ? 1/(1+exp(-1.7*(A1/sqrt(1)*Skill-B1_1))) -\n\
		\|                  1/(1+exp(-1.7*(A1/sqrt(1)*Skill-B1_2))) :\n\
		\| 1 - 1/(1+exp(-1.7*(A1/sqrt(1)*Skill-B1_1)))\n\
		";
	whenchanged = 1349104298;
	belief = (0.2289203, 0.2710797, 0.2710797, 0.2289203);
	visual V1 {
		center = (462, 132);
		height = 3;
		};
	};

node A1 {
	kind = CONSTANT;
	discrete = FALSE;
	levels = (0, 2);
	parents = ();
	EqnDirty = TRUE;
	title = "Score4-A";
	comment = "Discrimination for Score1";
	whenchanged = 1349104186;
	evidence = #0;
	value = 1;
	visual V1 {
		center = (618, 102);
		height = 5;
		};
	};

node B1_1 {
	kind = CONSTANT;
	discrete = FALSE;
	levels = (-3, 3);
	parents = ();
	EqnDirty = TRUE;
	title = "Score4-B1";
	comment = "Difficulty for Partial Credit or above.";
	whenchanged = 1349104277;
	evidence = #0;
	value = -1;
	visual V1 {
		center = (624, 132);
		height = 4;
		};
	};

node B1_2 {
	kind = CONSTANT;
	discrete = FALSE;
	levels = (-3, 3);
	parents = ();
	EqnDirty = TRUE;
	title = "Score4-B2";
	comment = "Difficulty for Full Credit or above.";
	whenchanged = 1349104285;
	evidence = #0;
	value = 0;
	visual V1 {
		center = (624, 162);
		height = 6;
		};
	};

node B1_3 {
	kind = CONSTANT;
	discrete = FALSE;
	levels = (-3, 3);
	parents = ();
	EqnDirty = TRUE;
	title = "Score4-B3";
	comment = "Difficulty for Full Credit or above.";
	whenchanged = 1349104293;
	evidence = #0;
	value = 1;
	visual V1 {
		center = (624, 192);
		height = 7;
		};
	};
ElimOrder = (Skill, Score4);
};
